from flask import Flask
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, filters, ContextTypes
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
import json
import difflib
import re
from datetime import datetime
import asyncio

# ===== Flask keep-alive server =====
flask_app = Flask('')

@flask_app.route('/')
def home():
    return "I'm alive!"

def run_flask():
    flask_app.run(host='0.0.0.0', port=8080)

# ===== Google Sheets setup =====
scope = ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/drive']
creds_dict = json.loads(os.environ['GOOGLE_CREDENTIALS'])
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ –∫–ª—é—á—É (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –∫–ª—é—á)
SPREADSHEET_KEY = "10-sXX7zmsjxcLBGoua876P9eopBwPSe4f6P0NfmRDfY"

def get_vacancies():
    sheet = client.open_by_key(SPREADSHEET_KEY).worksheet("–í–∞–∫–∞–Ω—Å–∏–∏")
    records = sheet.get_all_records()
    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (–°–¢–ê–¢–£–° == "–û–¢–ö–†–´–¢–ê")
    open_jobs = [row for row in records if row.get("–°–¢–ê–¢–£–°", "").strip().upper() == "–û–¢–ö–†–´–¢–ê"]
    return open_jobs

def get_questions():
    sheet = client.open_by_key(SPREADSHEET_KEY).worksheet("–í–æ–ø—Ä–æ—Å—ã")
    return sheet.get_all_records()

def save_application_to_sheet(name, phone, vacancy, username):
    sheet = client.open_by_key(SPREADSHEET_KEY).worksheet("–û—Ç–∫–ª–∏–∫–∏")
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sheet.append_row([now, name, phone, vacancy, f"@{username}" if username else "–±–µ–∑ username"], value_input_option="USER_ENTERED")

# ===== States =====
STATE_WAITING_FOR_FIO = 1
STATE_WAITING_FOR_PHONE = 2

# ===== Handlers =====

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–ê–ö–¢–£–ê–õ–¨–ù–´–ï –í–ê–ö–ê–ù–°–ò–ò", callback_data="find_jobs")]]
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç –∫–∞–¥—Ä–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞.\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=markup
    )

async def list_vacancies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    open_jobs = get_vacancies()
    if not open_jobs:
        msg = "–°–µ–π—á–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π."
        if update.message:
            await update.message.reply_text(msg)
        elif update.callback_query:
            await update.callback_query.message.reply_text(msg)
        return

    for i, row in enumerate(open_jobs):
        description = row.get('–û–ø–∏—Å–∞–Ω–∏–µ', '').strip()
        description_text = f"\n\nüìÉ –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n{description}" if description else ""
        text = (
            f"üìå *{row['–í–∞–∫–∞–Ω—Å–∏—è']}*\n\n"
            f"üíµ –ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {row.get('–ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üïê –í–∞—Ö—Ç–∞ –ø–æ 12 —á–∞—Å–æ–≤ (30/30): {row.get('–í–∞—Ö—Ç–∞ –ø–æ 12 —á–∞—Å–æ–≤ (30/30)', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
            f"üïë –í–∞—Ö—Ç–∞ –ø–æ 11 —á–∞—Å–æ–≤ (60/30): {row.get('–í–∞—Ö—Ç–∞ –ø–æ 11 —á (60/30)', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {row.get('–°–¢–ê–¢–£–°', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
            f"{description_text}"
        )
        keyboard = [
            [InlineKeyboardButton("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"apply_{i}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        if update.message:
            await update.message.reply_markdown(text, reply_markup=markup)
        elif update.callback_query:
            await update.callback_query.message.reply_markdown(text, reply_markup=markup)
    if update.callback_query:
        await update.callback_query.answer()

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "find_jobs":
        await list_vacancies(update, context)
    elif query.data == "back":
        await start(update, context)
    elif query.data.startswith("apply_"):
        await start_application(update, context)

async def start_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    index = int(query.data.split("_")[1])
    open_jobs = get_vacancies()
    if index < 0 or index >= len(open_jobs):
        await query.answer("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    vacancy = open_jobs[index]['–í–∞–∫–∞–Ω—Å–∏—è']
    context.user_data['vacancy'] = vacancy
    context.user_data['state'] = STATE_WAITING_FOR_FIO
    await query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—é:\n\n*{vacancy}*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", parse_mode='Markdown')

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get('state')
    if state == STATE_WAITING_FOR_FIO:
        await handle_fio(update, context)
    elif state == STATE_WAITING_FOR_PHONE:
        await handle_phone(update, context)
    else:
        # –ü—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è - –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        await search_vacancy(update, context)

async def handle_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fio = update.message.text.strip()
    if not re.match(r"^[–ê-–Ø–∞-—è–Å—ë\s\-]+$", fio):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û (—Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã).")
        return
    context.user_data['fio'] = fio
    context.user_data['state'] = STATE_WAITING_FOR_PHONE
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    if not re.match(r"^[\d+\-\(\)\s]+$", phone):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    context.user_data['phone'] = phone
    username = update.message.from_user.username if update.message.from_user else None
    save_application_to_sheet(
        context.user_data['fio'],
        context.user_data['phone'],
        context.user_data['vacancy'],
        username
    )
    await update.message.reply_text(
        f"–í–∞—à –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é *{context.user_data['vacancy']}* –ø—Ä–∏–Ω—è—Ç!\n\n"
        f"–§–ò–û: {context.user_data['fio']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫–ª–∏–∫!",
        parse_mode='Markdown'
    )
    context.user_data.clear()

async def search_vacancy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    open_jobs = get_vacancies()
    matches = []
    for row in open_jobs:
        vacancy_lines = row['–í–∞–∫–∞–Ω—Å–∏—è'].lower().splitlines()
        for line in vacancy_lines:
            if text in line or difflib.get_close_matches(text, [line], cutoff=0.6):
                matches.append(row)
                break

    if matches:
        for i, row in enumerate(matches):
            description = row.get('–û–ø–∏—Å–∞–Ω–∏–µ', '').strip()
            description_text = f"\n\nüìÉ –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n{description}" if description else ""
            text_response = (
                f"üìå *{row['–í–∞–∫–∞–Ω—Å–∏—è']}*\n\n"
                f"üíµ –ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {row.get('–ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"üïê –í–∞—Ö—Ç–∞ –ø–æ 12 —á–∞—Å–æ–≤ (30/30): {row.get('–í–∞—Ö—Ç–∞ –ø–æ 12 —á–∞—Å–æ–≤ (30/30)', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
                f"üïë –í–∞—Ö—Ç–∞ –ø–æ 11 —á–∞—Å–æ–≤ (60/30): {row.get('–í–∞—Ö—Ç–∞ –ø–æ 11 —á (60/30)', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
                f"üìå –°—Ç–∞—Ç—É—Å: {row.get('–°–¢–ê–¢–£–°', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
                f"{description_text}"
            )
            keyboard = [
                [InlineKeyboardButton("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"apply_{i}")],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
            ]
            markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_markdown(text_response, reply_markup=markup)
    else:
        await update.message.reply_text("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ê–ö–¢–£–ê–õ–¨–ù–´–ï –í–ê–ö–ê–ù–°–ò–ò'.")

# ===== Bot setup =====
def run_bot():
    app = ApplicationBuilder().token(os.environ["BOT_TOKEN"]).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("jobs", list_vacancies))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.run_polling()

# ===== Main =====
if __name__ == '__main__':
    Thread(target=run_flask).start()
    run_bot()
