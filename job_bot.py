from flask import Flask
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, filters, ContextTypes
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
import json
import difflib
import re
from datetime import datetime
import asyncio

# ===== Flask keep-alive server =====
flask_app = Flask('')

@flask_app.route('/')
def home():
    return "I'm alive!"

def run_flask():
    flask_app.run(host='0.0.0.0', port=8080)

# ===== Google Sheets setup =====
scope = ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/drive']
creds_dict = json.loads(os.environ['GOOGLE_CREDENTIALS'])
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)

SPREADSHEET_ID = "10-sXX7zmsjxcLBGoua876P9eopBwPSe4f6P0NfmRDfY"

def get_vacancies():
    sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–í–∞–∫–∞–Ω—Å–∏–∏")
    records = sheet.get_all_records()
    return [row for row in records if row.get('–°–¢–ê–¢–£–°', '').strip().upper() == '–û–¢–ö–†–´–¢–ê']

def get_faq():
    sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–í–æ–ø—Ä–æ—Å—ã")
    return sheet.get_all_records()

def save_application_to_sheet(name, phone, vacancy, username):
    sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–û—Ç–∫–ª–∏–∫–∏")
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sheet.append_row([now, name, phone, vacancy, f"@{username}" if username else "–±–µ–∑ username"], value_input_option="USER_ENTERED")

# ===== States =====
STATE_WAITING_FOR_FIO = 1
STATE_WAITING_FOR_PHONE = 2

# ===== Handlers =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üìã –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="find_jobs")]]
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç –∫–∞–¥—Ä–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞.\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏.",
        reply_markup=markup
    )

async def jobs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = get_vacancies()
    if not data:
        text = "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç."
    else:
        text = "\n".join([f"‚Ä¢ {row['–í–∞–∫–∞–Ω—Å–∏—è']}" for row in data])
    if update.message:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:\n\n" + text)
    elif update.callback_query:
        await update.callback_query.message.reply_text("–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:\n\n" + text)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "find_jobs":
        await jobs(update, context)
        await query.message.reply_text("–ö–∞–∫–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –ù–∞–ø–∏—à–∏—Ç–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ.")
    elif query.data == "back":
        await back(update, context)
    elif query.data.startswith("apply_"):
        await handle_apply(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    faq = get_faq()
    for row in faq:
        if text in row['–í–æ–ø—Ä–æ—Å'].lower():
            await update.message.reply_text(row['–û—Ç–≤–µ—Ç'])
            return

    data = get_vacancies()
    matches = []
    for row in data:
        if text in row['–í–∞–∫–∞–Ω—Å–∏—è'].lower() or difflib.get_close_matches(text, [row['–í–∞–∫–∞–Ω—Å–∏—è'].lower()], cutoff=0.6):
            matches.append(row)

    if matches:
        context.user_data['vacancy_matches'] = matches
        for i, row in enumerate(matches):
            description_text = f"\nüìÉ {row['–û–ø–∏—Å–∞–Ω–∏–µ']}" if row.get("–û–ø–∏—Å–∞–Ω–∏–µ") else ""
            response = (
                f"üìå *{row['–í–∞–∫–∞–Ω—Å–∏—è']}*\n\n"
                f"üí∞ –ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {row['–ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞']}\n"
                f"üïê –í–∞—Ö—Ç–∞ 12 —á (30/30): {row['–í–∞—Ö—Ç–∞ –ø–æ 12 —á–∞—Å–æ–≤ (30/30)']}\n"
                f"üïë –í–∞—Ö—Ç–∞ 11 —á (60/30): {row['–í–∞—Ö—Ç–∞ –ø–æ 11 —á (60/30)']}\n"
                f"{description_text}"
            )
            keyboard = [
                [InlineKeyboardButton("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"apply_{i}")],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
            ]
            markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_markdown(response, reply_markup=markup)
    else:
        await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—ë –ø–æ–ª–Ω–µ–µ.")

async def handle_apply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    index = int(query.data.split("_")[1])
    data = context.user_data.get('vacancy_matches', [])
    if index >= len(data):
        await query.answer("–û—à–∏–±–∫–∞: –≤–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    vacancy = data[index]['–í–∞–∫–∞–Ω—Å–∏—è']
    context.user_data['vacancy'] = vacancy
    context.user_data['state'] = STATE_WAITING_FOR_FIO
    await query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—é: *{vacancy}*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

async def handle_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fio = update.message.text.strip()
    if not re.match(r"^[–ê-–Ø–∞-—è–Å—ë\s\-]+$", fio):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    context.user_data['fio'] = fio
    context.user_data['state'] = STATE_WAITING_FOR_PHONE
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    if not re.match(r"^[\d+\-\(\)\s]+$", phone):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    context.user_data['phone'] = phone
    save_application_to_sheet(
        name=context.user_data['fio'],
        phone=phone,
        vacancy=context.user_data['vacancy'],
        username=update.message.from_user.username
    )
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∫–ª–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    context.user_data.clear()

async def back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìã –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="find_jobs")]])
    )

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get('state')
    if state == STATE_WAITING_FOR_FIO:
        await handle_fio(update, context)
    elif state == STATE_WAITING_FOR_PHONE:
        await handle_phone(update, context)
    else:
        await handle_message(update, context)

# ===== Bot setup =====
def run_bot():
    app = ApplicationBuilder().token(os.environ["BOT_TOKEN"]).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("jobs", jobs))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    app.run_polling()

# ===== Main start =====
if __name__ == '__main__':
    Thread(target=run_flask).start()
    run_bot()
