import os
import json
import re
import asyncio
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, filters, ContextTypes
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# --- Google Sheets setup ---
scope = ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/drive']
creds_dict = json.loads(os.environ['GOOGLE_CREDENTIALS'])
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)

SPREADSHEET_KEY = "10-sXX7zmsjxcLBGoua876P9eopBwPSe4f6P0NfmRDfY"
VACANCIES_SHEET = "–í–∞–∫–∞–Ω—Å–∏–∏"
APPLICATIONS_SHEET = "–û—Ç–∫–ª–∏–∫–∏"

def get_vacancies():
    sheet = client.open_by_key(SPREADSHEET_KEY).worksheet(VACANCIES_SHEET)
    return sheet.get_all_records()

def save_application(fio, phone, vacancy, username):
    sheet = client.open_by_key(SPREADSHEET_KEY).worksheet(APPLICATIONS_SHEET)
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sheet.append_row([now, fio, phone, vacancy, f"@{username}" if username else "–±–µ–∑ username"], value_input_option="USER_ENTERED")

# --- Bot handlers ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–ê–ö–¢–£–ê–õ–¨–ù–´–ï –í–ê–ö–ê–ù–°–ò–ò", callback_data="find_jobs")]]
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.",
        reply_markup=markup
    )

async def jobs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = get_vacancies()
    vacancies = [row for row in data if row.get('–°—Ç–∞—Ç—É—Å', '').upper() in ('–û–¢–ö–†–´–¢–ê', '–ù–ê–ë–ò–†–ê–ï–ú')]

    if not vacancies:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–∫–∞–Ω—Å–∏–∏ —Å–µ–π—á–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
        if update.callback_query:
            await update.callback_query.message.reply_text(text)
        else:
            await update.message.reply_text(text)
        return

    for i, row in enumerate(vacancies):
        vacancy_name = row.get('–í–∞–∫–∞–Ω—Å–∏—è', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        hourly_rate = row.get('–ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
        description = row.get('–û–ø–∏—Å–∞–Ω–∏–µ', '').strip()
        status = row.get('–°—Ç–∞—Ç—É—Å', '–Ω–µ —É–∫–∞–∑–∞–Ω')

        message_text = f"üîπ *{vacancy_name}*\n\n" \
                       f"üí∞ *–ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞:*\n{hourly_rate}\n\n" \
                       f"üìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{description}\n\n" \
                       f"üìå *–°—Ç–∞—Ç—É—Å:* {status}"

        keyboard = [
            [InlineKeyboardButton("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"apply_{i}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
        ]
        markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.message.reply_markdown(message_text, reply_markup=markup)
        else:
            await update.message.reply_markdown(message_text, reply_markup=markup)
        await asyncio.sleep(0.5)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "find_jobs":
        await jobs(update, context)
    elif query.data == "back":
        await start(update, context)
    elif query.data.startswith("apply_"):
        index = int(query.data.split("_")[1])
        data = get_vacancies()
        vacancies = [row for row in data if row.get('–°—Ç–∞—Ç—É—Å', '').upper() in ('–û–¢–ö–†–´–¢–ê', '–ù–ê–ë–ò–†–ê–ï–ú')]

        if 0 <= index < len(vacancies):
            vacancy = vacancies[index]['–í–∞–∫–∞–Ω—Å–∏—è']
            await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—é:\n\n{vacancy}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –§–ò–û.")
            context.user_data['vacancy'] = vacancy
            context.user_data['state'] = 'waiting_for_fio'
        else:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –≤–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get('state')

    if state == 'waiting_for_fio':
        fio = update.message.text.strip()
        if not re.match(r"^[–ê-–Ø–∞-—è–Å—ë\s-]+$", fio):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –§–ò–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã.")
            return
        context.user_data['fio'] = fio
        context.user_data['state'] = 'waiting_for_phone'
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

    elif state == 'waiting_for_phone':
        phone = update.message.text.strip()
        if not re.match(r"^[\d+\(\)\-\s]+$", phone):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        vacancy = context.user_data.get('vacancy')
        fio = context.user_data.get('fio')
        username = update.message.from_user.username or ""

        save_application(fio, phone, vacancy, username)

        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫–ª–∏–∫!\n\n"
            f"–í–∞–∫–∞–Ω—Å–∏—è: {vacancy}\n"
            f"–§–ò–û: {fio}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"Username: @{username if username else '–±–µ–∑ username'}"
        )
        context.user_data.clear()

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start.")

# --- Main ---

def main():
    app = ApplicationBuilder().token(os.environ["BOT_TOKEN"]).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("Bot started")
    app.run_polling()

if __name__ == "__main__":
    main()
