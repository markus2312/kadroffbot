import logging
import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# Google Sheets setup
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)

spreadsheet = client.open_by_url("https://docs.google.com/spreadsheets/d/10-sXX7zmsjxcLBGoua876P9eopBwPSe4f6P0NfmRDfY/edit")
sheet_vacancies = spreadsheet.worksheet("–í–∞–∫–∞–Ω—Å–∏–∏")
sheet_questions = spreadsheet.worksheet("–í–æ–ø—Ä–æ—Å—ã")
sheet_applications = spreadsheet.worksheet("–û—Ç–∫–ª–∏–∫–∏")

ASK_NAME, ASK_PHONE, ASK_POSITION = range(3)

await update.message.reply_text("""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç –∫–∞–¥—Ä–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞.
–ö–æ–º–∞–Ω–¥—ã:
/vacancies ‚Äì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏
/faq ‚Äì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
/apply ‚Äì –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É""")


async def vacancies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = sheet_vacancies.get_all_records()
    msg = ""
    for row in data:
        if row['–°–¢–ê–¢–£–°'].strip().upper() == "–û–¢–ö–†–´–¢–ê":
            msg += (
                f"üìå *{row['–í–∞–∫–∞–Ω—Å–∏—è']}*
"
                f"üí∏ –ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {row['–ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞']}
"
                f"üïê –í–∞—Ö—Ç–∞ 12—á (30/30): {row['–í–∞—Ö—Ç–∞ –ø–æ 12 —á–∞—Å–æ–≤ (30/30)']}
"
                f"üï¶ –í–∞—Ö—Ç–∞ 11—á (60/30): {row['–í–∞—Ö—Ç–∞ –ø–æ 11 —á (60/30)']}
"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {row['–û–ø–∏—Å–∞–Ω–∏–µ']}

"
            )
    await update.message.reply_text(msg or "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.", parse_mode='Markdown')

async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = sheet_questions.get_all_records()
    msg = "\n\n".join([f"‚ùì {row['–í–æ–ø—Ä–æ—Å']}\nüí¨ {row['–û—Ç–≤–µ—Ç']}" for row in data])
    await update.message.reply_text(msg or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º.")

async def apply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    return ASK_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return ASK_PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text
    await update.message.reply_text("–ù–∞ –∫–∞–∫—É—é –≤–∞–∫–∞–Ω—Å–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è?")
    return ASK_POSITION

async def get_position(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['position'] = update.message.text
    username = update.message.from_user.username or "‚Äî"
    today = datetime.today().strftime("%Y-%m-%d")

    sheet_applications.append_row([
        today,
        context.user_data['name'],
        context.user_data['phone'],
        context.user_data['position'],
        username
    ])
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def main():
    token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("vacancies", vacancies))
    app.add_handler(CommandHandler("faq", faq))

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("apply", apply)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            ASK_POSITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_position)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)

    app.run_polling()

if __name__ == "__main__":
    main()
